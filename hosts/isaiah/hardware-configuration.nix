# Do not modify this file!	It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.	Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  pkgs,
  ...
}:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot = {
    extraModulePackages = [ ];
    kernelModules = [ "kvm-amd" ];
    initrd = {
      availableKernelModules = [
        "nvme"
        "xhci_pci"
        "ahci"
        "usb_storage"
        "usbhid"
        "sd_mod"
        "sr_mod"
      ];
      kernelModules = [ ];
    };
    loader = {
      timeout = 15;
      systemd-boot = {
        enable = true;
        configurationLimit = 20;
        extraEntries = {
          "Win2.conf" = (
            lib.strings.concatStringsSep "\n" [
              "title Windows 11"
              "efi /shellx64.efi"
              "options -nointerrupt -noconsolein -noconsoleout windows11.nsh"
            ]
          );
          "Shell.conf" = (
            lib.strings.concatStringsSep "\n" [
              "title EFI Shell"
              "efi /shell.efi"
            ]
          );
        };
        extraFiles = {
          "windows11.nsh" = (pkgs.writeText "windows11.nsh" (lib.strings.concatStringsSep "\n" [ ]));
          "shell.efi" = "${pkgs.edk2-uefi-shell}/shell.efi";
        };
      };
    };
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/714744ca-dd9d-4713-b571-c6ccfbf56d79";
    fsType = "btrfs";
    options = [ "subvol=nixos" ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/714744ca-dd9d-4713-b571-c6ccfbf56d79";
    fsType = "btrfs";
    options = [ "subvol=home" ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/4A92-3E4B";
    fsType = "vfat";
  };

  fileSystems."/myvol" = {
    device = "/dev/disk/by-uuid/714744ca-dd9d-4713-b571-c6ccfbf56d79";
    fsType = "btrfs";
  };

  fileSystems."/var/lib/longhorn" = {
    device = "/dev/disk/by-uuid/b9f5ace7-d224-4aff-8770-d5a9d22be2ae";
    fsType = "xfs";
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp38s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp39s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp42s0f3u5u3c2.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
